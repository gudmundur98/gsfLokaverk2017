/*SP1 START*/
CREATE TABLE PRICE(
	PRICE_CODE DECIMAL(2,0) PRIMARY KEY,
	PRICE_DESCRIPTION VARCHAR(20) NOT NULL,
	PRICE_RENTFEE DECIMAL(5,2) CHECK(PRICE_RENTFEE >= 0),
	PRICE_DAILYATEFEE DECIMAL(5,2) CHECK(PRICE_DAILYATEFEE >= 0)
);
CREATE TABLE MOVIE(
	MOVIE_NUM INT(8) PRIMARY KEY,
	MOVIE_TITLE VARCHAR(55) NOT NULL,
	MOVIE_YEAR INT(4) CHECK(MOVIE_YEAR >= 1900),
	MOVIE_COST DECIMAL(5,2),
	MOVIE_GENRE VARCHAR(55),
	PRICE_CODE DECIMAL(2,0) CONSTRAINT VIDEO_MOVIE_NUM_FK REFERENCES MOVIE
);
CREATE TABLE VIDEO(
	VID_NUM DECIMAL(8,0) PRIMARY KEY,
	VID_INDATE DATE,
	MOVIE_NUM DECIMAL(2,0) CONSTRAINT VIDEO_MOVIE_NUM_FK REFERENCES MOVIE
);
CREATE TABLE MEMBERSHIP(
	MEM_NUM DECIMAL(8,0) PRIMARY KEY,
	MEM_FNAME VARCHAR(55) NOT NULL,
	MEM_LNAME VARCHAR(55) NOT NULL,
	MEM_STREET VARCHAR(175) NOT NULL,
	MEM_CITY VARCHAR(50),
	MEM_STATE CHAR(2),
	MEM_ZIP CHAR(5),
	MEM_BALANCE DECIMAL(10,2)
);
CREATE TABLE RENTAL(
	RENT_NUM DECIMAL(8,0),
	REN_DATE DATE,
	MEM_NUM DECIMAL(8,0) CONSTRAINT RENTAL_MEM_NUM_FK REFERENCES MEMBERSHIP
);
CREATE TABLE DETAILRENTAL(
	RENT_NUM DECIMAL(8,0) CONSTRAINT DETAIL_RENT_NUM_FK REFERENCES RENTAL,
	VID_NUM DECIMAL(8,0) CONSTRAINT DETAIL_VID_NUM_FK REFERENCES VIDEO,
	DETAIL_FEE DECIMAL(5,2),
	DETAIL_DUEDATE DATE,
	DETAIL_RETURNDATE DATE,
	DETAIL_DAILYATEFEE DECIMAL(5,2),
	CONSTRAINT DETAIL_RENT_VID_PK PRIMARY KEY (RENT_NUM,VID_NUM)
);
/*SP1 END*/
/*SP2 START*/
/*PRICE*/
INSERT INTO PRICE VALUES (1, 'Standard', 2, 1);
INSERT INTO PRICE VALUES (2, 'New Release', 3.5, 3);
INSERT INTO PRICE VALUES (3, 'Discount', 1.5, 1);
INSERT INTO PRICE VALUES (4, 'Weekly Special', 1, .5);
/*PRICE END*/
/*MOVIE*/
INSERT INTO MOVIE VALUES (1234, 'The Cesar Family Christmas', 2009, 39.95, 'FAMILY', 2);
INSERT INTO MOVIE VALUES (1235, 'Smokey Mountain Wildlife', 2006, 59.95, 'ACTION', 1);
INSERT INTO MOVIE VALUES (1236, 'Richard Goodhope', 2010, 59.95, 'DRAMA', 2);
INSERT INTO MOVIE VALUES (1237, 'Beatnik Fever', 2009, 29.95, 'COMEDY', 2);
INSERT INTO MOVIE VALUES (1238, 'Constant Companion', 2010, 89.95, 'DRAMA', NULL);
INSERT INTO MOVIE VALUES (1239, 'Where Hope Dies', 2000, 25.49, 'DRAMA', 3);
INSERT INTO MOVIE VALUES (1245, 'Time to Burn', 2007, 45.49, 'ACTION', 1);
INSERT INTO MOVIE VALUES (1246, "What He Doesn't Know", 2008, 58.29, 'COMEDY', 1);
/*MOVIE END*/
/*VIDEO*/
INSERT INTO VIDEO VALUES (34341, '22-JAN-09', 1235);
INSERT INTO VIDEO VALUES (34342, '22-JAN-09', 1235);
INSERT INTO VIDEO VALUES (34366, '02-MAR-11', 1236);
INSERT INTO VIDEO VALUES (34367, '02-MAR-11', 1236);
INSERT INTO VIDEO VALUES (34368, '02-MAR-11', 1236);
INSERT INTO VIDEO VALUES (34369, '02-MAR-11', 1236);
INSERT INTO VIDEO VALUES (44392, '21-OCT-10', 1237);
INSERT INTO VIDEO VALUES (44397, '21-OCT-10', 1237);
INSERT INTO VIDEO VALUES (54321, '18-JUN-10', 1234);
INSERT INTO VIDEO VALUES (54324, '18-JUN-10', 1234);
INSERT INTO VIDEO VALUES (54325, '18-JUN-10', 1234);
INSERT INTO VIDEO VALUES (59237, '14-FEB-11', 1237);
INSERT INTO VIDEO VALUES (61353, '28-JAN-08', 1245);
INSERT INTO VIDEO VALUES (61354, '28-JAN-08', 1245);
INSERT INTO VIDEO VALUES (61367, '30-JUL-10', 1246);
INSERT INTO VIDEO VALUES (61369, '30-JUL-10', 1246);
INSERT INTO VIDEO VALUES (61388, '25-JAN-09', 1239);
/*VIDEO END*/
/*MEMBERSHIP*/
INSERT INTO MEMBERSHIP VALUES (102, 'TAMI', 'DAWSON', '2632 TAKLI CIRCLE', 'NORENE', 'TN', '37136', 11);
INSERT INTO MEMBERSHIP VALUES (103, 'CURT', 'KNIGHT', '4025 CORNELL COURT', 'FLATGAP', 'KY', '41219', 6);
INSERT INTO MEMBERSHIP VALUES (104, 'JAMAL', 'MELENDEZ', '788 EAST 145TH AVENUE', 'QUEBECK', 'TN', '38579', 0);
INSERT INTO MEMBERSHIP VALUES (105, 'IVA', 'MCCLAIN', '6045 MUSKET BALL CIRCLE', 'SUMMIT', 'KY', '42783', 15);
INSERT INTO MEMBERSHIP VALUES (106, 'MIRANDA', 'PARKS', '4469 MAXWELL PLACE', 'GERMANTOWN', 'TN', '38183', 0);
INSERT INTO MEMBERSHIP VALUES (107, 'ROSARIO', 'ELLIOTT', '7578 DANNER AVENUE', 'COLUMBIA', 'TN', '38402', 5);
INSERT INTO MEMBERSHIP VALUES (108, 'MATTIE', 'GUY', '4390 EVERGREEN STREET', 'LILY', 'KY', '40740', 0);
INSERT INTO MEMBERSHIP VALUES (109, 'CLINT', 'OCHOA', '1711 ELM STREET', 'GREENEVILLE', 'TN', '37745', 10);
INSERT INTO MEMBERSHIP VALUES (110, 'LEWIS', 'ROSALES', '4524 SOUTHWIND CIRCLE', 'COUNCE', 'TN', '38326', 0);
INSERT INTO MEMBERSHIP VALUES (111, 'STACY', 'MANN', '2789 EAST COOK AVENUE', 'MURFREESBORO', 'TN', '37132', 8);
INSERT INTO MEMBERSHIP VALUES (112, 'LUIS', 'TRUJILLO', '7267 MELVIN AVENUE', 'HEISKELL', 'TN', '37754', 3);
INSERT INTO MEMBERSHIP VALUES (113, 'MINNIE', 'GONZALES', '6430 VASILI DRIVE', 'WILLISTON', 'TN', '38076', 0);
/*MEMBERSHIP END*/
/*RENTAL*/
INSERT INTO RENTAL VALUES (1001, '01-MAR-11', 103);
INSERT INTO RENTAL VALUES (1002, '01-MAR-11', 105);
INSERT INTO RENTAL VALUES (1003, '02-MAR-11', 102);
INSERT INTO RENTAL VALUES (1004, '02-MAR-11', 110);
INSERT INTO RENTAL VALUES (1005, '02-MAR-11', 111);
INSERT INTO RENTAL VALUES (1006, '02-MAR-11', 107);
INSERT INTO RENTAL VALUES (1007, '02-MAR-11', 104);
INSERT INTO RENTAL VALUES (1008, '03-MAR-11', 105);
INSERT INTO RENTAL VALUES (1009, '03-MAR-11', 111);
/*RENTAL END*/
/*DETAILRENTAL*/
INSERT INTO DETAILRENTAL VALUES (1001, 34342, 2, '04-MAR-11', '02-MAR-09', 1);
INSERT INTO DETAILRENTAL VALUES (1001, 34366, 3.5, '04-MAR-11', '02-MAR-09', 3);
INSERT INTO DETAILRENTAL VALUES (1001, 61353, 2, '04-MAR-11', '03-MAR-09', 1);
INSERT INTO DETAILRENTAL VALUES (1002, 59237, 3.5, '04-MAR-11', '04-MAR-09', 3);
INSERT INTO DETAILRENTAL VALUES (1003, 54325, 3.5, '04-MAR-11', '09-MAR-09', 3);
INSERT INTO DETAILRENTAL VALUES (1003, 61369, 2, '06-MAR-11', '09-MAR-09', 1);
INSERT INTO DETAILRENTAL VALUES (1003, 61388, 0, '06-MAR-11', '09-MAR-09', 1);
INSERT INTO DETAILRENTAL VALUES (1004, 34341, 2, '07-MAR-11', '07-MAR-09', 1);
INSERT INTO DETAILRENTAL VALUES (1004, 34367, 3.5, '05-MAR-11', '07-MAR-09', 3);
INSERT INTO DETAILRENTAL VALUES (1004, 44392, 3.5, '05-MAR-11', '07-MAR-09', 3);
INSERT INTO DETAILRENTAL VALUES (1005, 34342, 2, '07-MAR-11', '05-MAR-09', 1);
INSERT INTO DETAILRENTAL VALUES (1005, 44397, 3.5, '05-MAR-11', '05-MAR-09', 3);
INSERT INTO DETAILRENTAL VALUES (1006, 34366, 3.5, '05-MAR-11', '04-MAR-09', 3);
INSERT INTO DETAILRENTAL VALUES (1006, 61367, 2, '07-MAR-11', NULL, 1);
INSERT INTO DETAILRENTAL VALUES (1007, 34368, 3.5, '05-MAR-11', NULL, 3);
INSERT INTO DETAILRENTAL VALUES (1008, 34369, 3.5, '05-MAR-11', '05-MAR-09', 3);
INSERT INTO DETAILRENTAL VALUES (1009, 54324, 3.5, '05-MAR-11', NULL, 3);
/*DETAILRENTAL END*/
/*SP2 END*/
/*SP3*/
SELECT MOVIE_TITLE, MOVIE_YEAR, MOVIE_COST FROM MOVIE WHERE MOVIE_TITLE = '%hope%'ORDER BY MOVIE_TITLE ASC;
/*SP3 END*/
/*SP4*/
SELECT MOVIE_TITLE, MOVIE_YEAR, MOVIE_GENRE FROM MOVIE WHERE MOVIE_GENRE = "ACTION";
/*SP4 END*/
/*SP5*/
SELECT MOVIE_NUM, MOVIE_TITLE, MOVIE_COST FROM MOVIE WHERE MOVIE_COST > 40;
/*SP5 END*/
/*SP6*/
SELECT MOVIE_NUM, MOVIE_TITLE, MOVIE_COST, MOVIE_GENRE FROM MOVIE WHERE MOVIE_GENRE IN ('ACTION','COMEDY') AND MOVIE_COST < 50; ORDER BY MOVIE_GENRE ASC;
/*SP56 END*/
/*SP7*/
SELECT MOVIE_NUM,MOVIE_TITLE || '('||MOVIE_YEAR||')'||MOVIE_GENRE AS "Movie Description" FROM MOVIE;
/*SP7 END*/
/*SP8*/
SELECT MOVIE_GENRE, COUNT(*) AS "Number Of Movies" FROM MOVIE GROUP BY MOVIE_GENRE;
/*SP8 END*/
/*SP9*/
SELECT AVG(MOVIE_COST) AS "Average Movie Cost" FROM MOVIE;
/*SP9 END*/
/*SP10*/
SELECT MOVIE_GENRE, AVG(MOVIE_COST) AS "Average Movie Cost" FROM MOVIE GROUP BY MOVIE_GENRE;
/*SP10 END*/
/*SP11*/
SELECT MOVIE_TITLE, MOVIE_GENRE,PRICE_DESCRIPTION,PRICE_RENTFEE FROM MOVIE.PRICE_CODE = PRICE.PRICE_CODE;
/*SP11 END*/
/*SP12*/
SELECT MOVIE_GENRE, AVG(PRICE_RENTFEE) AS "Average Rental Fee" FROM MOVIE, PRICE WHERE MOVIE.PRICE_CODE = PRICE.PRICE_CODE;
/*SP12 END*/
/*SP13*/
SELECT MOVIE_TITLE, MOVIE_YEAR, MOVIE_COST / PRICE_RENTFEE FROM MOVIE, PRICE WHERE MOVE.PRICE_CODE = PRICE.PRICE_CODE;
/*SP13 END*/
/*SP14*/
SELECT MOVIE_TITLE, MOVIE_YEAR FROM MOVIE WHERE PRICE_CODE IS NOT NULL;
/*SP14 END*/
/*SP15*/
SELECT MOVIE_TITLE, MOVIE_YEAR, MOVIE_COST FROM MOVIE_COST BETWEEN 44.99 AND 49.99;
/*SP15 END*/
/*SP16*/
SELECT MOVIE_TITLE, MOVIE_YEAR,PRICE_DESCRIPTION,PRICE_RENTFEE, MOVIE_GENRE FROM MOVIE,PRICE WHERE MOVIE.PRICE_CODE = PRICE.PRICE_CODE AND MOVIE_GENRE IN ('FAMILY','COMEDY','DRAMA');
/*SP16 END*/

/*SP17*/
SELECT MIN(MEM_BALANCE) AS "Minimum Balance", MAX(MEM_BALANCE) AS "Maximum Balance", AVG(MEM_BALANCE) AS "Average Balance" FROM MEMBERSHIP WHERE MEM_NUM IN (SELECT MEM_NUM FROM RENTAL);
/*SP17 END*/
/*SP18*/
SELECT MEM_FNAME ||''|| MEM_LNAME AS "Membership Name", MEM_STREET ||''|| MEM_CITY ||','|| MEM_STATE ||''|| MEM_ZIP AS "Membership Address" FROM MEMBERSHIP;
/*SP18 END*/
/*SP19*/
SELECT RENTAL.RENT_NUM, RENT_DATE, VIDEO.VID_NUM,MOVIE_TITLE,
		DETAIL_DUEDATE, DETAIL_RETURNDATE FROM RENTAL.DETAILRENTAL,VIDOE,MOVIE
		WHERE RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM 
		AND DETAILRENTAL.VID_NUM = VIDEO.VID_NUM
		AND VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM
		ORDER BY RENTAL.RENT_NUM, MOVIE_TITLE;
/*SP19 END*/
/*SP20*/
SELECT RENTAL.RENT_NUM, RENT_DATE, VIDEO.VID_NUM,MOVIE_TITLE,
		DETAIL_DUEDATE,DETAIL_RETURNDATE,
		DETAIL_RETURNDATE - DETAIL_DUEDATE AS "Days Past Due"
		FROM RENTAL,DETAILRENTAL, VIDEO, MOVIE
		WHERE RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM
		AND DETAILRENTAL.VID_NUM = MOVIE.MOVIE_NUM
		AND VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM
		AND DETAIL_RETURNDATE > DETAIL_DUEDATE
		ORDER BY RENTAL.RENT_NUM, MOVIE_TITLE;
/*SP20 END*/
/*SP21*/
SELECT 	RENTAL.RENT_NUM, RENT_DATE, MOVIE_TITLE, DETAIL_FEE
		FROM 	RENTAL, DETAILRENTAL, VIDEO, MOVIE
		WHERE	RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM
		AND	DETAILRENTAL.VID_NUM = VIDEO.VID_NUM
		AND	VIDEO.MOVIE_NUM = MOVIE.MOVIE_NUM
		AND	DETAIL_RETURNDATE <= DETAIL_DUEDATE;
/*SP21 END*/
/*SP22*/
SELECT 	MEMBERSHIP.MEM_NUM, MEM_LNAME, MEM_FNAME, SUM(DETAILRENTAL.DETAIL_FEE) AS "Rental Fee Revenue"
		FROM 	MEMBERSHIP, RENTAL, DETAILRENTAL
		WHERE	MEMBERSHIP.MEM_NUM = RENTAL.MEM_NUM
		AND	RENTAL.RENT_NUM = DETAILRENTAL.RENT_NUM
		GROUP BY MEMBERSHIP.MEM_NUM, MEM_LNAME, MEM_FNAME;
/*SP22 END*/
/*SP23*/
SELECT 	MOVIE_NUM, M.MOVIE_GENRE, AVGCOST AS "Average Cost", 
		MOVIE_COST, (MOVIE_COST – AVGCOST)/AVGCOST * 100 AS "Percent Difference"
		FROM 	MOVIE M, 	(SELECT MOVIE_GENRE, AVG(MOVIE_COST) AS AVGCOST
		FROM MOVIE
		GROUP BY MOVIE_GENRE) S
		WHERE M.MOVIE_GENRE = S.MOVIE_GENRE;
/*SP23 END*/
/*SP24*/
ALTER TABLE DETAILRENTAL ADD(DETAIL_DAYSLATE INT(3));
/*SP24 END*/
/*SP25*/
ALTER TABLE VIDEO ADD(VID_STATUS = 'IN' OR VID_STATUS = 'OUT' OR VID_STATUS = 'LOST');
/*SP25 END*/
/*SP26*/
UPDATE VIDEO SET VID_STATUS = 'OUT' WHERE VID_NUM IN (SELECT VID_NUM FROM DETAILRENTAL WHERE DETAIL_RETURNDATE IS NULL);
/*SP26 END*/
/*SP27*/
ALTER TABLE PRICE ADD(PRICE_RENTDAYS INT(3) DEFAULT 3 NOT NULL);
/*SP27 END*/
/*SP28*/
PRICE_RENTDAYS = 7;
UPDATE PRICE SET PRICE_RENTDAYS = 5 WHERE PRICE_CODE = 1;
UPDATE PRICE SET PRICE_RENTDAYS = 3 WHERE PRICE_CODE = 2;
UPDATE PRICE SET PRICE_RENTDAYS = 5 WHERE PRICE_CODE = 3;
UPDATE PRICE SET PRICE_RENTDAYS = 7 WHERE PRICE_CODE = 4;
/*SP28 END*/
CREATE OR REPLACE TRIGGER TRG_LATE_RETURN 
BEFORE UPDATE OF DETAIL_RETURNDATE, DETAIL_DUEDATE ON DETAILRENTAL 
FOR EACH ROW 
	BEGIN 
	IF :NEW.DETAIL_RETURNDATE IS NULL THEN 
		:NEW.DETAIL_DAYSLATE := NULL; 
	 	ELSIF Trunc(:NEW.DETAIL_RETURNDATE) <= Trunc(:NEW.DETAIL_DUEDATE) 
	 	OR (Trunc(:NEW.DETAIL_RETURNDATE) = Trunc(:NEW.DETAIL_DUEDATE) + 1 
	 	AND To_CHAR(:NEW.DETAIL_RETURNDATE, 'HH24:MI:SS') <= '12:00:00') THEN 
	 	:NEW.DETAIL_DAYSLATE := 0; 
	 ELSE 
	 	:NEW.DETAIL_DAYSLATE := Trunc(:NEW.DETAIL_RETURNDATE) -
	 	 Trunc(:NEW.DETAIL_DUEDATE);
	END IF;
END;
/
/*SP29 END*/
/*SP30*/
CREATE OR REPLACE TRIGGER TRG_MEM_BALANCE 
AFTER UPDATE OF DETAIL_DUEDATE, DETAIL_RETURNDATE ON DETAILRENTAL
FOR EACH ROW
DECLARE PRIOR_LATEFEE NUMBER;
NEW_LATEFEE NUMBER;
 UPDATE_AMOUNT NUMBER; 
 RENTAL_MEMBER RENTAL.MEM_NUM%TYPE;
 BEGIN PRIOR_LATEFEE := :OLD.DETAIL_DAYSLATE * :OLD.DETAIL_DAILYLATEFEE;
 IF PRIOR_LATEFEE IS NULL THEN 
 PRIOR_LATEFEE := 0;
 END IF;
 NEW_LATEFEE := :NEW.DETAIL_DAYSLATE * :NEW.DETAIL_DAILYLATEFEE;
 IF NEW_LATEFEE IS NULL THEN
 NEW_LATEFEE := 0;
 END IF;
 UPDATE_AMOUNT := NEW_LATEFEE - PRIOR_LATEFEE;
 IF UPDATE_AMOUNT <> 0 THEN
 SELECT MEM_NUM 
 INTO RENTAL_MEMBER 
 FROM RENTAL 
 WHERE RENT_NUM = :NEW.RENT_NUM; 
 UPDATE MEMBERSHIP SET MEM_BALANCE = MEM_BALANCE + UPDATE_AMOUNT
 WHERE MEM_NUM = RENTAL_MEMBER;
 END IF; 
END;
/
/*SP30 END*/
/*SP31*/
CREATE OR REPLACE PROCEDURE PRC_NEW_RENTAL (MEM_NUM_TEMP IN 
MEMBERSHIP.MEM_NUM%TYPE) AS MEM_NUM_COUNT NUMBER; 
PREV_MEM_BALANCE MEMBERSHIP.MEM_BALANCE%TYPE; 
	BEGIN 
		SELECT Count(*) 
		INTO MEM_NUM_COUNT 
		FROM MEMBERSHIP 
		WHERE MEM_NUM = MEM_NUM_TEMP; 
		IF MEM_NUM_COUNT = 0 THEN 
		Dbms_Output.PUT_LINE('No Membership with number: ' || MEM_NUM_TEMP || ' exists.'); 
		ELSE 
		SELECT MEM_BALANCE 
		INTO PREV_MEM_BALANCE 
		FROM MEMBERSHIP
		WHERE MEM_NUM = MEM_NUM_TEMP; 
		Dbms_Output.PUT_LINE('Previous balance: ' || To_Char(PREV_MEM_BALANCE, 
			'$999,999,990.99')); 
		INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) 
		VALUES (RENT_NUM_SEQ.NEXTVAL, SYSDATE, MEM_NUM_TEMP); 
	END IF; 
END;
/
/*SP31 END*/
/*SP32*/
CREATE OR REPLACE PROCEDURE PRC_NEW_DETAIL(VID_NUM_TEMP IN 
	VIDEO.VID_NUM%TYPE) AS
	VID_NUM_COUNT NUMBER;
	STATUS_TEMP VIDEO.VID_STATUS%TYPE;
	RENT_FEE PRICE.PRICE_RENTFEE%TYPE;
	LATE_FEE PRICE.PRICE_DAILYLATEFEE%TYPE; 
	RENT_DAYS PRICE.PRICE_RENTDAYS%TYPE; 
	DUE_DATE DATE; 
	BEGIN 
		SELECT Count(*) 
		INTO VID_NUM_COUNT 
		FROM VIDEO 
		WHERE VID_NUM = VID_NUM_TEMP; 
	IF VID_NUM_COUNT = 0 THEN 
		Dbms_Output.PUT_LINE('No Video with number ' || VID_NUM_TEMP || ' was found.'); 
		ELSE 
		SELECT VID_STATUS 
		INTO STATUS_TEMP 
		FROM VIDEO 
		WHERE VID_NUM = VID_NUM_TEMP;
	IF STATUS_TEMP <> 'IN' THEN 
		Dbms_Output.PUT_LINE('The video is not currently IN. Video return must be entered before it can be rented again.'); 
		ELSE
	    SELECT PRICE_RENTFEE, PRICE_DAILYLATEFEE, PRICE_RENTDAYS 
	    INTO RENT_FEE, LATE_FEE, RENT_DAYS 
	    FROM VIDEO JOIN MOVIE USING (MOVIE_NUM) JOIN PRICE USING (PRICE_CODE) 
	    WHERE VID_NUM = VID_NUM_TEMP; 
	    DUE_DATE := To_Date(To_Char(SYSDATE, 'MM/DD/YYYY') || ' 23:59:59', 'MM/DD/YYYY HH24:MI:SS') + RENT_DAYS; 
	    INSERT INTO DETAILRENTAL(RENT_NUM, VID_NUM, DETAIL_FEE, DETAIL_DUEDATE, DETAIL_DAILYLATEFEE) 
	    VALUES (RENT_NUM_SEQ.CURRVAL, VID_NUM_TEMP, RENT_FEE, DUE_DATE, LATE_FEE); 
	    UPDATE VIDEO 
	    SET VID_STATUS = 'OUT' 
	    WHERE VID_NUM = VID_NUM_TEMP; 
    END IF; 
  END IF; 
END;
/
/*SP32 END*/
